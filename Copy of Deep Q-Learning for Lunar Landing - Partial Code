{"cells":[{"cell_type":"markdown","metadata":{"id":"LbZcI9ZXHl3a"},"source":["# Deep Q-Learning for Lunar Landing"]},{"cell_type":"markdown","metadata":{"id":"E8yPRjteXgPb"},"source":["## Part 0 - Installing the required packages and importing the libraries"]},{"cell_type":"markdown","metadata":{"id":"slEm5teGWjWU"},"source":["### Installing Gymnasium"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"dbnq3XpoKa_7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701707783353,"user_tz":300,"elapsed":29846,"user":{"displayName":"Robert Zheng","userId":"02836817127272693658"}},"outputId":"e1bc5cd5-8bff-48b9-ed29-fb97490cea6c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: gymnasium in /usr/local/lib/python3.10/dist-packages (0.29.1)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium) (1.23.5)\n","Requirement already satisfied: cloudpickle>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium) (2.2.1)\n","Requirement already satisfied: typing-extensions>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium) (4.5.0)\n","Requirement already satisfied: farama-notifications>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from gymnasium) (0.0.4)\n","Requirement already satisfied: gymnasium[accept-rom-license,atari] in /usr/local/lib/python3.10/dist-packages (0.29.1)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium[accept-rom-license,atari]) (1.23.5)\n","Requirement already satisfied: cloudpickle>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium[accept-rom-license,atari]) (2.2.1)\n","Requirement already satisfied: typing-extensions>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium[accept-rom-license,atari]) (4.5.0)\n","Requirement already satisfied: farama-notifications>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from gymnasium[accept-rom-license,atari]) (0.0.4)\n","Requirement already satisfied: autorom[accept-rom-license]~=0.4.2 in /usr/local/lib/python3.10/dist-packages (from gymnasium[accept-rom-license,atari]) (0.4.2)\n","Requirement already satisfied: shimmy[atari]<1.0,>=0.1.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium[accept-rom-license,atari]) (0.2.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from autorom[accept-rom-license]~=0.4.2->gymnasium[accept-rom-license,atari]) (8.1.7)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from autorom[accept-rom-license]~=0.4.2->gymnasium[accept-rom-license,atari]) (2.31.0)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from autorom[accept-rom-license]~=0.4.2->gymnasium[accept-rom-license,atari]) (4.66.1)\n","Requirement already satisfied: AutoROM.accept-rom-license in /usr/local/lib/python3.10/dist-packages (from autorom[accept-rom-license]~=0.4.2->gymnasium[accept-rom-license,atari]) (0.6.1)\n","Requirement already satisfied: ale-py~=0.8.1 in /usr/local/lib/python3.10/dist-packages (from shimmy[atari]<1.0,>=0.1.0->gymnasium[accept-rom-license,atari]) (0.8.1)\n","Requirement already satisfied: importlib-resources in /usr/local/lib/python3.10/dist-packages (from ale-py~=0.8.1->shimmy[atari]<1.0,>=0.1.0->gymnasium[accept-rom-license,atari]) (6.1.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->autorom[accept-rom-license]~=0.4.2->gymnasium[accept-rom-license,atari]) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->autorom[accept-rom-license]~=0.4.2->gymnasium[accept-rom-license,atari]) (3.6)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->autorom[accept-rom-license]~=0.4.2->gymnasium[accept-rom-license,atari]) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->autorom[accept-rom-license]~=0.4.2->gymnasium[accept-rom-license,atari]) (2023.11.17)\n","Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","swig is already the newest version (4.0.2-1ubuntu1).\n","0 upgraded, 0 newly installed, 0 to remove and 15 not upgraded.\n","Requirement already satisfied: gymnasium[box2d] in /usr/local/lib/python3.10/dist-packages (0.29.1)\n","Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium[box2d]) (1.23.5)\n","Requirement already satisfied: cloudpickle>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium[box2d]) (2.2.1)\n","Requirement already satisfied: typing-extensions>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from gymnasium[box2d]) (4.5.0)\n","Requirement already satisfied: farama-notifications>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from gymnasium[box2d]) (0.0.4)\n","Requirement already satisfied: box2d-py==2.3.5 in /usr/local/lib/python3.10/dist-packages (from gymnasium[box2d]) (2.3.5)\n","Requirement already satisfied: pygame>=2.1.3 in /usr/local/lib/python3.10/dist-packages (from gymnasium[box2d]) (2.5.2)\n","Requirement already satisfied: swig==4.* in /usr/local/lib/python3.10/dist-packages (from gymnasium[box2d]) (4.1.1.post0)\n"]}],"source":["!pip install gymnasium\n","!pip install \"gymnasium[atari, accept-rom-license]\"\n","!apt-get install -y swig\n","!pip install gymnasium[box2d]"]},{"cell_type":"markdown","metadata":{"id":"brqiMN3UW9T9"},"source":["### Importing the libraries"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"mZaKXP_aMl9O","executionInfo":{"status":"ok","timestamp":1701707786139,"user_tz":300,"elapsed":2787,"user":{"displayName":"Robert Zheng","userId":"02836817127272693658"}}},"outputs":[],"source":["import os\n","import random\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","import torch.autograd as autograd\n","from torch.autograd import Variable\n","from collections import deque, namedtuple\n","#gymnasium.farama.org is an environment website with plenty of examples of toy AI\n","# we're gonna start with the Atari Game Kung Fu Master and Lunar Landing"]},{"cell_type":"markdown","metadata":{"id":"EzlDKXvkXzGI"},"source":["## Part 1 - Building the AI"]},{"cell_type":"markdown","metadata":{"id":"UtG6Zc83YYy3"},"source":["### Creating the architecture of the Neural Network"]},{"cell_type":"code","source":["class Network(nn.Module):\n","\n","#state size for lunar landing will be an 8 value vector\n","  def __init__(self, state_size, action_size, seed = 42):\n","      super(Network, self).__init__()\n","      self.seed = torch.manual_seed(seed)\n","      # fcl fully connected layer, finding the number of neurons is a lot of trial and error\n","      self.fc1 = nn.Linear(state_size, 64)\n","      self.fc2 = nn.Linear(64, 64)\n","      self.fc3 = nn.Linear(64, action_size)\n","\n","  def forward(self, state):\n","      #store the response of layer 1\n","      x = self.fc1(state)\n","      #rectifier activation function\n","      x = F.relu(x)\n","      x = self.fc2(x)\n","      x = F.relu(x)\n","      return self.fc3(x) # return the output of the final layer\n","\n"],"metadata":{"id":"sZAyTBW2vjtw","executionInfo":{"status":"ok","timestamp":1701707786139,"user_tz":300,"elapsed":3,"user":{"displayName":"Robert Zheng","userId":"02836817127272693658"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UxVrBnFWZKb1"},"source":["## Part 2 - Training the AI"]},{"cell_type":"markdown","metadata":{"id":"T364fz9qZb2j"},"source":["### Setting up the environment"]},{"cell_type":"code","source":["import gymnasium as gym\n","env = gym.make('LunarLander-v2')\n","state_shape = env.observation_space.shape\n","state_size = env.observation_space.shape[0]\n","number_actions = env.action_space.n\n","print('State shape: ', state_shape)\n","print('State size: ', state_size)\n","print('Number of actions: ', number_actions)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NJlIV4WKxi-d","executionInfo":{"status":"ok","timestamp":1701707787986,"user_tz":300,"elapsed":1849,"user":{"displayName":"Robert Zheng","userId":"02836817127272693658"}},"outputId":"332ba66a-710d-4af2-bbe9-3f5656203091"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["State shape:  (8,)\n","State size:  8\n","Number of actions:  4\n"]}]},{"cell_type":"markdown","metadata":{"id":"c_dZmOIvZgj-"},"source":["### Initializing the hyperparameters"]},{"cell_type":"code","source":["learning_rate = 5e-4 #5 times 10 to the power of -4\n","minibatch_size = 100 # common practice number\n","discount_factor = 0.99 #represents the depressing value of the rewards so we consider future rewards\n","replay_buffer_size = int(1e5) #how many experiences in the memory in the agent\n","interpolation_parameter = 1e-3 #sometimes called Tau"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RxtOyZGiz-Ya","executionInfo":{"status":"ok","timestamp":1701707787986,"user_tz":300,"elapsed":5,"user":{"displayName":"Robert Zheng","userId":"02836817127272693658"}},"outputId":"81da17e7-be01-40f8-87c7-ba03af1d2e30"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","metadata":{"id":"8hD_Vs-bYnip"},"source":["### Implementing Experience Replay"]},{"cell_type":"code","source":["class ReplayMemory(object): #no inheritance\n","    def __init__(self, capacity):\n","      self.device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\") #try gpu\n","      self.capacity = capacity\n","      self.memory = []\n","\n","    def push(self, event): # add new event\n","      self.memory.append(event)\n","      if len(self.memory) > self.capacity:\n","        del self.memory[0]\n","\n","    def sample(self, batch_size):\n","      experiences = random.sample(self.memory, k = batch_size)\n","      states = torch.from_numpy(np.vstack([e[0] for e in experiences if e is not None])).float().to(self.device)\n","      #stack all the states together\n","      #convert to pytorch with torch.from_numpy()\n","      actions = torch.from_numpy(np.vstack([e[1] for e in experiences if e is not None])).long().to(self.device)\n","      rewards = torch.from_numpy(np.vstack([e[2] for e in experiences if e is not None])).float().to(self.device)\n","      next_states = torch.from_numpy(np.vstack([e[3] for e in experiences if e is not None])).float().to(self.device)\n","      dones = torch.from_numpy(np.vstack([e[4] for e in experiences if e is not None]).astype(np.uint8)).float().to(self.device)\n","      return states, next_states, actions, rewards, dones\n"],"metadata":{"id":"d-AoPUlr0kOR","executionInfo":{"status":"ok","timestamp":1701707787986,"user_tz":300,"elapsed":3,"user":{"displayName":"Robert Zheng","userId":"02836817127272693658"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JmEkbFbUY6Jt"},"source":["### Implementing the DQN class"]},{"cell_type":"code","source":["class Agent():\n","\n","  def __init__(self, state_size, action_size):\n","    self.device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\") #try gpu\n","    self.state_size = state_size\n","    self.action_size = action_size #number of actions\n","    #local and target Q-networks\n","    self.local_qnetwork = Network(state_size, action_size).to(self.device)\n","    self.target_qnetwork = Network(state_size, action_size).to(self.device)\n","    self.optimizer = optim.Adam(self.local_qnetwork.parameters(), lr = learning_rate)\n","    self.memory = ReplayMemory(replay_buffer_size)\n","    self.t_step = 0 #time counter\n","\n","  def step(self, state, action, reward, next_state, done):\n","    self.memory.push((state, action, reward, next_state, done))\n","    self.t_step = (self.t_step+1) % 4 #reset every 4 time counter\n","    if self.t_step == 0: #learn by minibatch every 4 time\n","      if len(self.memory.memory) > minibatch_size:\n","        experiences = self.memory.sample(100)\n","        self.learn(experiences, discount_factor) #learning by the batch\n","\n","  #uses an epsilon greedy policy with random change of doing something different.\n","  def act(self, state, epsilon = 0.):\n","    state = torch.from_numpy(state).float().unsqueeze(0).to(self.device)\n","    #convert to pytorch and add extra dimension to represent batch number\n","    self.local_qnetwork.eval() #evaluation mode\n","    with torch.no_grad(): #no gradient functions\n","      action_values = self.local_qnetwork(state)\n","    self.local_qnetwork.train()\n","    if random.random() > epsilon:\n","      return np.argmax(action_values.cpu().data.numpy()) #chooose the highest value\n","    else:\n","      return random.choice(np.arange(self.action_size)) #randomly choose action\n","\n","  def learn(self, experiences, discount_factor):\n","    states, next_states, actions, rewards, dones = experiences\n","    next_q_targets = self.target_qnetwork(next_states).detach().max(1)[0].unsqueeze(1) #get the max action value\n","    q_targets = rewards + discount_factor * next_q_targets * (1 - dones)\n","    q_expected = self.local_qnetwork(states).gather(1, actions) #expected values form the q-network\n","    loss = F.mse_loss(q_expected, q_targets) #mean square error loss\n","    #time to backpropogate based off the loss\n","    self.optimizer.zero_grad() #reset the optimizer\n","    loss.backward() #backpropagate\n","    self.optimizer.step() #a single optimization step to update parameters\n","    self.soft_update(self.local_qnetwork, self.target_qnetwork, interpolation_parameter)\n","\n","  #the soft update BLENDS the parameters for both target and local, to prevent abrupt changes that could destabilize training\n","  def soft_update(self, local_model, target_model, interpolation_parameter):\n","    for target_param, local_param in zip(target_model.parameters(), local_model.parameters()):\n","      #a for loop with a tuple from the zip\n","      target_param.data.copy_(interpolation_parameter * local_param.data + (1.0 - interpolation_parameter) * target_param.data)\n","      #update target parameters\n","\n"],"metadata":{"id":"Vm1hAkgr3_Ye","executionInfo":{"status":"ok","timestamp":1701707787986,"user_tz":300,"elapsed":3,"user":{"displayName":"Robert Zheng","userId":"02836817127272693658"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"o1tZElccZmf6"},"source":["### Initializing the DQN agent"]},{"cell_type":"code","source":["agent = Agent(state_size, number_actions) #congrats we've made an AI"],"metadata":{"id":"M_PEvkBEfOQb","executionInfo":{"status":"ok","timestamp":1701707790769,"user_tz":300,"elapsed":2785,"user":{"displayName":"Robert Zheng","userId":"02836817127272693658"}}},"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"E8v0PtUfaVQp"},"source":["### Training the DQN agent"]},{"cell_type":"code","source":["number_episodes = 2000 #max number of eps in which we'll train the agents\n","maximum_number_timesteps_per_episode = 1000\n","epsilon_starting_value = 1.0 #starting value which will decay\n","epsilon_ending_value = 0.01\n","epsilon_decay_value = 0.995 #multiply it by this every time\n","epsilon = epsilon_starting_value\n","scores_on_100_episodes = deque(maxlen = 100) #contain window of scores on last 100 episodes\n","\n","for episode in range(1,number_episodes +1):\n","  #start by reseting the environment\n","  state, _ = env.reset()\n","  #initialize the score aka cumulated reward\n","  score = 0\n","  for t in range(maximum_number_timesteps_per_episode): #loop over the timesteps\n","    action = agent.act(state, epsilon) #pick out the greedy action usually\n","    #now that you've moved, update the state and rewards\n","    next_state, reward, done, _, _ = env.step(action)\n","    #step method includes the backpropagation so use that part\n","    agent.step(state, action, reward, next_state, done)\n","    state = next_state\n","    score += reward\n","    if done:\n","      break\n","  scores_on_100_episodes.append(score)\n","  epsilon = max(epsilon_ending_value, epsilon_decay_value * epsilon)\n","  print('\\rEpisode {}\\tAverage Score: {:.2f}'.format(episode, np.mean(scores_on_100_episodes)), end = \"\")\n","  if episode % 100 == 0:\n","    print('\\rEpisode {}\\tAverage Score: {:.2f}'.format(episode, np.mean(scores_on_100_episodes))) #no dynamic override effect\n","  #you want to save the model if you win\n","  if np.mean(scores_on_100_episodes) >= 200.0:\n","    print('\\nEnvironment solved in {:d} episodes!\\tAverage Score: {:.2f}'.format(episode - 100, np.mean(scores_on_100_episodes)))\n","    torch.save(agent.local_qnetwork.state_dict(), 'checkpoint.pth')\n","    break\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nuWGhz1Qfgy_","executionInfo":{"status":"ok","timestamp":1701708195449,"user_tz":300,"elapsed":404681,"user":{"displayName":"Robert Zheng","userId":"02836817127272693658"}},"outputId":"034497f1-cbc2-4d01-f70f-911b24096b2d"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["Episode 100\tAverage Score: -150.03\n","Episode 200\tAverage Score: -115.31\n","Episode 300\tAverage Score: -50.77\n","Episode 400\tAverage Score: 15.87\n","Episode 500\tAverage Score: 145.00\n","Episode 582\tAverage Score: 200.36\n","Environment solved in 482 episodes!\tAverage Score: 200.36\n"]}]},{"cell_type":"markdown","metadata":{"id":"O8CNwdOTcCoP"},"source":["## Part 3 - Visualizing the results"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"cb9nVvU2Okhk","colab":{"base_uri":"https://localhost:8080/","height":459},"executionInfo":{"status":"ok","timestamp":1701708200217,"user_tz":300,"elapsed":4780,"user":{"displayName":"Robert Zheng","userId":"02836817127272693658"}},"outputId":"557907ba-1ccc-44d1-da2f-1c75585fa797"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:imageio_ffmpeg:IMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (600, 400) to (608, 400) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<video alt=\"test\" autoplay\n","                loop controls style=\"height: 400px;\">\n","                <source src=\"data:video/mp4;base64,\" type=\"video/mp4\" />\n","             </video>"]},"metadata":{}}],"source":["import glob\n","import io\n","import base64\n","import imageio\n","from IPython.display import HTML, display\n","from gym.wrappers.monitoring.video_recorder import VideoRecorder\n","\n","def show_video_of_model(agent, env_name):\n","    env = gym.make(env_name, render_mode='rgb_array')\n","    state, _ = env.reset()\n","    done = False\n","    frames = []\n","    while not done: #in the visualization you don't see the agent step method, no more training\n","        frame = env.render()\n","        frames.append(frame)\n","        action = agent.act(state)\n","        state, reward, done, _, _ = env.step(action.item())\n","    env.close()\n","    imageio.mimsave('video.mp4', frames, fps=30)\n","\n","show_video_of_model(agent, 'LunarLander-v2')\n","\n","def show_video():\n","    mp4list = glob.glob('*.mp4')\n","    if len(mp4list) > 0:\n","        mp4 = mp4list[0]\n","        video = io.open(mp4, 'r+b').read()\n","        encoded = base64.b64encode(video)\n","        display(HTML(data='''<video alt=\"test\" autoplay\n","                loop controls style=\"height: 400px;\">\n","                <source src=\"data:video/mp4;base64,{0}\" type=\"video/mp4\" />\n","             </video>'''.format(encoded.decode('ascii'))))\n","    else:\n","        print(\"Could not find video\")\n","\n","show_video()"]},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.functional as F\n","import gym\n","import matplotlib.pyplot as plt\n","from collections import namedtuple\n","import random\n","\n","# Define the Q-network\n","class QNetwork(nn.Module):\n","    def __init__(self, input_size, output_size):\n","        super(QNetwork, self).__init__()\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, output_size)\n","\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        return self.fc3(x)\n","\n","# Define the experience replay buffer\n","Transition = namedtuple('Transition', ('state', 'action', 'next_state', 'reward', 'done'))\n","\n","class ReplayBuffer:\n","    def __init__(self, capacity):\n","        self.capacity = capacity\n","        self.memory = []\n","        self.position = 0\n","\n","    def push(self, *args):\n","        if len(self.memory) < self.capacity:\n","            self.memory.append(None)\n","        self.memory[self.position] = Transition(*args)\n","        self.position = (self.position + 1) % self.capacity\n","\n","    def sample(self, batch_size):\n","        return random.sample(self.memory, batch_size)\n","\n","    def __len__(self):\n","        return len(self.memory)\n","\n","# Define the DQN agent\n","class DQNAgent:\n","    def __init__(self, state_size, action_size, epsilon_start=1.0, epsilon_end=0.01, epsilon_decay=0.995, gamma=0.99):\n","        self.device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","        self.q_network = QNetwork(state_size, action_size).to(self.device)\n","        self.target_network = QNetwork(state_size, action_size).to(self.device)\n","        self.target_network.load_state_dict(self.q_network.state_dict())\n","        self.target_network.eval()\n","        self.optimizer = optim.Adam(self.q_network.parameters())\n","        self.epsilon = epsilon_start\n","        self.epsilon_end = epsilon_end\n","        self.epsilon_decay = epsilon_decay\n","        self.gamma = gamma\n","        self.steps_done = 0\n","\n","    def select_action(self, state):\n","        self.epsilon = max(self.epsilon_end, self.epsilon * self.epsilon_decay)\n","        self.steps_done += 1\n","        if random.random() < self.epsilon:\n","            return torch.tensor([random.randrange(self.q_network.fc3.out_features)], device=self.device, dtype=torch.long)\n","        else:\n","            with torch.no_grad():\n","                return self.q_network(state).max(1)[1].view(1, 1)\n","\n","    def optimize_model(self, batch_size):\n","        if len(memory) < batch_size:\n","            return\n","        transitions = memory.sample(batch_size)\n","        batch = Transition(*zip(*transitions))\n","\n","        non_final_mask = torch.tensor(tuple(map(lambda s: s is not None, batch.next_state)), device=self.device, dtype=torch.bool)\n","        non_final_next_states = torch.cat([s for s in batch.next_state if s is not None])\n","\n","        state_batch = torch.cat(batch.state)\n","        action_batch = torch.cat(batch.action)\n","        reward_batch = torch.cat(batch.reward)\n","\n","        state_action_values = self.q_network(state_batch).gather(1, action_batch)\n","\n","        next_state_values = torch.zeros(batch_size, device=self.device)\n","        next_state_values[non_final_mask] = self.target_network(non_final_next_states).max(1)[0].detach()\n","\n","        expected_state_action_values = reward_batch + self.gamma * next_state_values\n","\n","        loss = F.smooth_l1_loss(state_action_values, expected_state_action_values.unsqueeze(1))\n","\n","        self.optimizer.zero_grad()\n","        loss.backward()\n","        for param in self.q_network.parameters():\n","            param.grad.data.clamp_(-1, 1)\n","        self.optimizer.step()\n","\n","# Hyperparameters\n","state_size = env.observation_space.shape[0]\n","action_size = env.action_space.n\n","batch_size = 64\n","capacity = 10000\n","episodes = 1000\n","\n","# Initialize environment and agent\n","env = gym.make('LunarLander-v2')\n","agent = DQNAgent(state_size, action_size)\n","memory = ReplayBuffer(capacity)\n","\n","# Training loop\n","for episode in range(episodes):\n","    state = torch.tensor(env.reset(), device=agent.device, dtype=torch.float32).view(1, -1)\n","    total_reward = 0\n","    for t in range(1000):  # Limit the number of timesteps per episode\n","        action = agent.select_action(state)\n","        next_state, reward, done, _ = env.step(action.item())\n","        total_reward += reward\n","\n","        if not done:\n","            next_state = torch.tensor(next_state, device=agent.device, dtype=torch.float32).view(1, -1)\n","        else:\n","            next_state = None\n","\n","        reward = torch.tensor([reward], device=agent.device, dtype=torch.float32)\n","\n","        action = torch.tensor([action], device=agent.device, dtype=torch.long)\n","        memory.push(state, action, next_state, reward, done)\n","        state = next_state\n","\n","        agent.optimize_model(batch_size)\n","\n","        if done:\n","            break\n","\n","    # Update the target network every 10 episodes\n","    if episode % 10 == 0:\n","        agent.target_network.load_state_dict(agent.q_network.state_dict())\n","\n","    print(f\"Episode {episode + 1}, Total Reward: {total_reward}\")\n","\n","# Generate a video of the trained agent\n","env = gym.make('LunarLander-v2')\n","state = torch.tensor(env.reset(), device=agent.device, dtype=torch.float32).view(1, -1)\n","frames = []\n","while True:\n","    frames.append(env.render(mode='rgb_array'))\n","    with torch.no_grad():\n","        action = agent.q_network(state).max(1)[1].view(1, 1)\n","    next_state, _, done, _ = env.step(action.item())\n","    if done:\n","        break\n","    state = torch.tensor(next_state, device=agent.device, dtype=torch.float32).view(1, -1)\n","\n","# Save the frames as a video\n","import imageio\n","imageio.mimsave('lunar_lander_video.gif', frames)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":250},"id":"xyAe3mm0vcqp","executionInfo":{"status":"error","timestamp":1701790225526,"user_tz":300,"elapsed":7799,"user":{"displayName":"Robert Zheng","userId":"02836817127272693658"}},"outputId":"d8c607cf-7fca-4310-d16e-2edecc48d72d"},"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-98a7f792a7b5>\u001b[0m in \u001b[0;36m<cell line: 97>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     95\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     96\u001b[0m \u001b[0;31m# Hyperparameters\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 97\u001b[0;31m \u001b[0mstate_size\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobservation_space\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     98\u001b[0m \u001b[0maction_size\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maction_space\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     99\u001b[0m \u001b[0mbatch_size\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m64\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'env' is not defined"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"1aTAGb5YWBe0rNk62aFJIxAOfq5_E3Y3B","timestamp":1701271662714},{"file_id":"1IXSqYOFw40oO-rJW683jtVFEUV-A6ZDS","timestamp":1695853573029}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}